# Project Rules

## Project Information

- **Version**: 1.0.0
- **Last Updated**: January 29, 2025 at 12:40 PM
- **Name**: gentrade-back
- **Language**: python
- **Framework**: FastApi, Langchain
- **Type**: application

## Project Description

This project is a backend application designed to facilitate the creation, management, and backtesting of cryptocurrency trading strategies using Freqtrade, leveraging AI agents for strategy generation. It provides a comprehensive API for users to interact with their strategies, chat histories, and backtesting results, utilizing a microservices architecture with Celery for task management and Langchain for AI-driven features. The application uniquely combines user-defined strategies with AI-generated components, aiming to empower traders with both custom and intelligent trading tools.

## AI Behavior Rules

### Code Generation Style

#### Preferred Patterns

- Use of f-strings for string formatting.
- Type hinting for function parameters and return values.
- Use of Pydantic for data validation and settings management.
- Use of async/await for asynchronous operations.
- Use of FastAPI for web framework.
- Use of snake_case for variable and function names.
- Use of PascalCase for class names.
- Use of UPPER_SNAKE_CASE for constants.
- Use of docstrings for documenting functions and classes.
- Use of consistent indentation (4 spaces).
- Use of list comprehension where appropriate.
- Use of descriptive variable names.

#### Patterns to Avoid

- Magic numbers or strings.
- Hardcoded paths or configurations.
- Inconsistent naming conventions.
- Synchronous operations in asynchronous contexts.
- Unnecessary complexity.
- Global variables.
- Inconsistent usage of imports

### Error Handling

#### Preferred Patterns

- Use of try-except blocks for handling exceptions.
- Specific exception handling where possible (e.g., IntegrityError, ValidationError).
- Returning JSON responses with appropriate status codes for errors.
- Logging exceptions with detailed messages.
- Raising exceptions to be handled by parent functions or exception handlers.

#### Patterns to Avoid

- Bare except clauses.
- Ignoring exceptions without proper handling.
- Returning generic error messages without context.
- Unnecessary nesting of try/except blocks.

### Performance

#### Preferred Patterns

- Use of asynchronous database operations.
- Use of connection pooling for database connections.
- Use of Celery for background tasks.
- Lazy loading for expensive operations.
- Efficient data structures and algorithms.
- Minimizing database queries.

#### Patterns to Avoid

- Synchronous database operations in asynchronous contexts.
- Unnecessary database queries.
- Blocking operations in asynchronous contexts.
- Inefficient algorithms or data structures.

### Module Organization

#### Structure

- The project is structured into several directories: `app`, `tests`, `alembic`.
- The `app` directory contains the main application code.
- The `app` directory is further divided into subdirectories such as `agents`, `config`, `db`, `dependencies`, `routers`, `schemas`, `tasks`, `util`.
- `app/agents` contains code related to AI agents, including models, graphs, and tools.
- `app/config` contains configuration settings.
- `app/db` contains database-related code, including models, migrations, and utils.
- `app/dependencies` contains dependency injection logic.
- `app/routers` contains API endpoint definitions.
- `app/schemas` contains Pydantic schemas for data validation.
- `app/tasks` contains Celery task definitions.
- `app/util` contains utility functions.

#### Dependencies

- FastAPI is used as the main web framework.
- Pydantic is used for data validation and settings management.
- SQLAlchemy is used for database interaction.
- Celery is used for background task management.
- Langchain is used for AI agent functionality.
- Psycopg and Asyncpg are used for database drivers.
- Svix is used for webhook verification.
- Python-on-whales is used for Docker interactions.
- Dotenv is used for loading environment variables.

#### Module Responsibilities

- **app/config.py**: Loads and manages application settings from environment variables.
- **app/main.py**: Sets up the FastAPI application, including middleware, exception handlers, and routes, and the lifespan for the main agent.
- **app/dependencies.py**: Defines FastAPI dependency injection functions for authentication, database, and Celery.
- **app/routers/v1/router_users.py**: Handles API endpoints for user creation.
- **app/routers/v1/router_webhooks.py**: Handles incoming webhook events, specifically from Clerk.
- **app/routers/v1/router_backtests.py**: Handles API endpoints for backtest creation and retrieval.
- **app/routers/v1/router_chats.py**: Handles API endpoints for chat history management.
- **app/routers/v1/router_strategies.py**: Handles API endpoints for strategy creation, retrieval and deletion.
- **app/tasks/backtests.py**: Defines Celery tasks for running backtests.
- **app/util/ft_userdir.py**: Manages user directories for Freqtrade data.
- **app/util/ft_strategies.py**: Manages user strategies files.
- **app/util/ft_backtesting.py**: Runs Freqtrade backtests in Docker containers.
- **app/util/exceptions.py**: Defines custom exception classes.
- **app/dependencies/celery.py**: Defines Celery dependency injection.
- **app/agents/model.py**: Initializes the language model.
- **app/agents/main/graph_main.py**: Defines the main agent graph and logic.
- **app/agents/main/schemas.py**: Defines Pydantic schemas for main agent.
- **app/agents/main/tools/calculator.py**: Defines a calculator tool for the AI agent.
- **app/agents/main/prompts/base.py**: Defines prompts for the main agent.
- **app/agents/strategy/graph_strategy_code.py**: Defines the graph for strategy code generation.
- **app/agents/strategy/graph_strategy_draft.py**: Defines the graph for strategy draft creation.
- **app/agents/strategy/schemas.py**: Defines schemas for strategy agent.
- **app/agents/strategy/tools/strategy_draft_output.py**: Defines the strategy draft output tool for the AI agent.
- **app/agents/strategy/prompts/strategy_code.py**: Defines prompts for the strategy code generation agent.
- **app/agents/strategy/prompts/base.py**: Defines prompts for the strategy draft agent.
- **app/schemas/schema_chats.py**: Defines Pydantic schemas for chat data.
- **app/schemas/schema_backtests.py**: Defines Pydantic schemas for backtest data.
- **app/schemas/schema_strategies.py**: Defines Pydantic schemas for strategy data.
- **app/schemas/schema_clerk_webhook_event.py**: Defines Pydantic schemas for Clerk webhook data.
- **app/schemas/schema_users.py**: Defines Pydantic schemas for user data.
- **app/db/db.py**: Sets up the SQLAlchemy database connection and session management.
- **app/db/migrations**: Contains Alembic migrations for database schema changes.

#### Rules

- Use of FastAPI's dependency injection for managing resources like database connections and authentication.
- Consistent use of Pydantic for data validation and serialization.
- Asynchronous operations using async/await throughout the codebase.
- Clear separation of concerns into modules based on functionality.
- Use of a Unit of Work pattern for database interactions.
- Use of Celery for handling background tasks.
- Use of Langchain for AI agent functionality.
- Consistent use of logging for debugging and monitoring.
- Use of Docker for containerization and backtesting.

#### Naming Conventions

- **classes**: PascalCase (e.g., Settings, UserSchema, BacktestService)
- **functions**: snake_case (e.g., add_user, get_chat_list, run_backtest_task)
- **variables**: snake_case (e.g., user_id, strategy_name, db_host)
- **constants**: UPPER_SNAKE_CASE (e.g., HTTP_201_CREATED, WH_SECRET)
- **files**: snake_case (e.g., ft_userdir.py, router_users.py)
